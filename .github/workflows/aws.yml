name: CI/CD Docker

on:
  push:
    branches:
      - develop
env:
  POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  APP_PORT: ${{ secrets.APP_PORT }}
  APP_HOST: ${{ secrets.APP_HOST }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
  AUTH0_PUBLIC_URL: ${{ secrets.AUTH0_PUBLIC_URL }}
  PYTHONPATH: /app
  ECR_REPOSITORY: meduzzen
jobs:
  Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Create env file
        run: |
          touch .env
          echo PYTHONPATH=$PYTHONPATH >> .env
          echo POSTGRES_URL=$POSTGRES_URL >> .env
          echo POSTGRES_PORT=$POSTGRES_PORT >> .env
          echo POSTGRES_DB=$POSTGRES_DB >> .env
          echo POSTGRES_USER=$POSTGRES_USER >> .env
          echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env
          echo REDIS_URL=$REDIS_URL >> .env
          echo REDIS_PORT=$REDIS_PORT >> .env
          echo REDIS_PASSWORD=$REDIS_PASSWORD >> .env
          echo APP_PORT=$APP_PORT >> .env
          echo APP_HOST=$APP_HOST >> .env
          echo SECRET_KEY=$SECRET_KEY >> .env
          echo AUTH0_AUDIENCE=$AUTH0_AUDIENCE >> .env
          echo AUTH0_PUBLIC_URL=$AUTH0_PUBLIC_URL >> .env
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG:  ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition fastapiTask --query taskDefinition > taskdefinition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdefinition.json
          container-name: fastapiApp
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
        run: |
          echo ${{ env.ECS_SERVICE }}
          echo ${{ env.ECS_CLUSTER }}